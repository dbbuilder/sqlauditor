name: Build and Test

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false

    steps:
    - name: Configure git
      if: runner.os == 'Windows'
      run: |
        git config --global core.protectNTFS false
      shell: cmd
        
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        clean: true

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore
      working-directory: api

    - name: Build
      run: dotnet build --no-restore --configuration Release
      working-directory: api

    - name: Test with coverage
      run: |
        if ls *Test*.csproj 2>/dev/null || ls *Tests.csproj 2>/dev/null; then
          dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
        else
          echo "No test projects found, skipping tests"
        fi
      working-directory: api

    - name: Generate coverage report
      if: matrix.os == 'ubuntu-latest'
      run: |
        if [ -d "coverage" ]; then
          dotnet tool install --global dotnet-reportgenerator-globaltool || true
          reportgenerator -reports:coverage/**/coverage.cobertura.xml -targetdir:coverage/report -reporttypes:Html,Cobertura || echo "No coverage files to process"
        else
          echo "No coverage directory found, skipping report generation"
        fi
      working-directory: api

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        directory: ./api/coverage
        files: '**/coverage.cobertura.xml'
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage reports
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: api/coverage/report/

  code-quality:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install dotnet-format
      run: dotnet tool install --global dotnet-format

    - name: Check formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic
      working-directory: api

    - name: Run code analysis
      run: dotnet build /p:EnableNETAnalyzers=true /p:AnalysisMode=AllEnabledByDefault /p:EnforceCodeStyleInBuild=true
      working-directory: api

  publish:
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Create release packages
      run: |
        dotnet publish SqlAnalyzer.Api/SqlAnalyzer.Api.csproj -c Release -o ./publish/api
      working-directory: api

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-packages
        path: api/publish/